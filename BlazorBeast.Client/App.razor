@using System.Reflection
@using BlazorBeast.Policies
@using BlazorBeast.Shared.Versioning

@* @inject LazyAssemblyLoader _lazyAssemblyLoader *@

<CascadingValue Value="@(new AppVersion(Version))">
<Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="@_additionalAssemblies">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
</CascadingValue>


@code {
    
    [Parameter]
    public string Version { get; set; }

    private readonly List<Assembly> _additionalAssemblies = new()
    {
        typeof(LicensePage).Assembly
    };
    
    // private async Task OnNavigateAsync(NavigationContext args)
    // {
    //     if (args.Path.StartsWith("policy/"))
    //     {
    //         var assemblies = await _lazyAssemblyLoader.LoadAssembliesAsync(new[] { "BlazorBeast.Policies.dll" });
    //         _additionalAssemblies.AddRange(assemblies);
    //     }
    // }
}